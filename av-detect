#!/usr/bin/env python
# Author: Justin Konecny

from _ast import Num
import argparse
from datetime import datetime
import hashlib
import os
import random
import sys


# executes the program
def main():
    # creates the command line argument parser and the appropriate required inputs
    parser = argparse.ArgumentParser(description="Anti-virus detector software")
    parser.add_argument('file_signatures', metavar='<input signature file>', action='store', help="the input file for the malware signatures")
    parser.add_argument('binaries', metavar='[unknown binary]', nargs='+', help="arbitrary number of binaries")

    # reads and stores the command arguments
    args = parser.parse_args()
    file_signatures = args.file_signatures
    binaries = args.binaries
    
    try:
        # checks the given files against malware signatures
        checkSignatures(file_signatures, binaries)
    except IOError as e:
        # prints an error to the console if the binary cannot be open
        print("[ERROR]: " + e.__str__())
    

# checks the given binaries against the give signatures
def checkSignatures(file_signatures, binaries):
    # opens the file of signatures
    with open(file_signatures) as sigs:
        # reads all signatures into a list
        list_sigs = sigs.readlines();
        # iterates over all given binaries
        for file in binaries:
            # opens the file
            with open(file) as content:
                # flag to determine if the file is malware
                is_malware = False
                all_content = content.read()
                # iterates through all signatures
                for sig in list_sigs:
                    # is the signature is present in the binary?
                    is_malware = (sig.rstrip() in all_content)
                    if is_malware:
                        print(os.path.basename(file) + ": MALWARE")
                        break
                if not is_malware:
                    print(os.path.basename(file) +  ": SAFE")


# invokes main() if program is run from the command line
if __name__ == '__main__':
    main()
